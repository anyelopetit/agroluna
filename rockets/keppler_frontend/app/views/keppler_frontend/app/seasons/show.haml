-# = render 'keppler_frontend/app/farms/components/navbar', farm: @farm, farms: @farms
.app_wrapper
  .container_custom
    -# = render 'keppler_frontend/app/cattle/partials/search', farm: farm, search: search
    .d-flex.justify-content-between
      .float-left.mb-4{ style: 'width: 80%' }
        %h1
          #{@season.name}
          %label.badge (#{@season.type_name})
          %small.badge.badge-secondary #{@season.start_date&.strftime("%d/%m/%Y")} - #{@season.finish_date&.strftime("%d/%m/%Y")}
      - if @season.finished
        .float-right.mt-4.mb-4
          = link_to reopen_farm_season_path(@farm, @season), method: :post, data: { confirm: '¿Estás seguro?' } do
            %button.btn.btn_custom.btn--medium.float-right.m-1
              %i.icofont-close-circled
              Reabrir temporada
      - else
        .float-right.mt-4.mb-4
          - if @season.cows.select { |x| x.status&.status_type&.eql?('Pregnancy') }.count > 0
            %button.btn.btn_custom.btn--medium.float-right.m-1{ onclick: "Swal.fire({title: 'Aún tiene hembras en estado de preñez', text: 'Por favor revise o cambie su estado', type: 'warning'})" }
              %i.icofont-close-circled
              Cierre
          - else
            = link_to finish_farm_season_path(@farm, @season), method: :post, data: { confirm: '¿Estás seguro?' } do
              %button.btn.btn_custom.btn--medium.float-right.m-1
                %i.icofont-close-circled
                Cierre
          = link_to edit_farm_season_path(@farm, @season) do
            %button.btn.btn_custom.btn--filled.btn--medium.float-right.m-1
              %i.icofont-pencil
              Editar
          -# %a#add-cicle{ href: '#' }
            %button.btn.btn_custom.btn--filled.btn--medium
            +
            Agregar ciclo
    - if @season.finished || Date.today > @season.finish_date
      = render 'keppler_frontend/app/seasons/seasonFinish', season: @season
    - else
      = render 'keppler_frontend/app/seasons/gantt', season: @season
      .d-flex.justify-content-between.mt-5.mb-3.mt-4
        .left
          %h1
            Ganados por lotes
            %small (#{@season.cows.where(gender: 'female').count})
        - unless @season.type_id.zero?
          .right
            .d-flex.justify-content-end
              .float-right.mt-4.mb-4
                -# = link_to new_assign_cattle_farm_season_path(@farm, @season) do
                  %button.btn.btn_custom.btn--filled.btn--medium
                    %i.icofont-plus
                    Agregar Serie
                %button.btn.btn_custom.btn--filled.btn--medium{'data-target': "#modalLote", 'data-toggle': 'modal'}
                  %i.icofont-plus
                  Importar de lote
      #index-container
        %table
          - if @cow_strategic_lots.size.zero?
            %thead
              %tr
                %th.not-records.center
                  %center No se encontraron lotes estratégicos asociados a ganados
          - else
            %thead
              %tr
                %th Nombre
                %th Disponibles
                %th En celo
                %th Inseminadas
                %th Preñadas
                %th Paridas
                %th Total
                %th Toros
            %tbody
              - @cow_strategic_lots.each do |strategic_lot|
                %tr
                  %td
                    = link_to({ controller: :seasons, action: :availables, farm_id: @farm&.id, id: @season.id, strategic_lot_id: strategic_lot.id },{ title: strategic_lot.function }) do
                      = strategic_lot.name
                  %td
                    = link_to({ controller: :seasons, action: :availables, farm_id: @farm&.id, id: @season.id, strategic_lot_id: strategic_lot.id },{ title: strategic_lot.function }) do
                      = @cows.total_season_cows(strategic_lot).type_is(['Nil', nil]).count
                  %td
                    = link_to({ controller: :seasons, action: :zeals, farm_id: @farm&.id, id: @season.id, strategic_lot_id: strategic_lot.id },{ title: strategic_lot.function }) do
                      = @cows.total_season_cows(strategic_lot).type_is(['Zeal']).count
                  %td
                    = link_to({ controller: :seasons, action: :services, farm_id: @farm&.id, id: @season.id, strategic_lot_id: strategic_lot.id },{ title: strategic_lot.function }) do
                      = @cows.total_season_cows(strategic_lot).type_is(['Service']).count
                  %td
                    = link_to({ controller: :seasons, action: :pregnants, farm_id: @farm&.id, id: @season.id, strategic_lot_id: strategic_lot.id },{ title: strategic_lot.function }) do
                      = @cows.total_season_cows(strategic_lot).type_is(['Pregnancy']).count
                  %td
                    = link_to({ controller: :seasons, action: :births, farm_id: @farm&.id, id: @season.id, strategic_lot_id: strategic_lot.id },{ title: strategic_lot.function }) do
                      = @cows.total_season_cows(strategic_lot).type_is(['Birth']).count
                  %td
                    = link_to({ controller: :seasons, action: :births, farm_id: @farm&.id, id: @season.id, strategic_lot_id: strategic_lot.id },{ title: strategic_lot.function }) do
                      = @cows.total_season_cows(strategic_lot).count
                  %td
                    = link_to({ controller: :seasons, action: :availables, farm_id: @farm&.id, id: @season.id, strategic_lot_id: strategic_lot.id },{ title: strategic_lot.function }) do
                      = @bulls.total_season_bulls(strategic_lot).count
      - unless @season.type_id.zero?
        - unless @cows.type_is(['Service']).blank?
          .d-flex.justify-content-between.mt-5.mb-3.mt-4
            .left
              %h1 Inseminadas
          %table
            %thead
              %tr
                %th Número de serie
                %th Nombre corto
                %th Fecha de Servicio
                %th Pajuela Usada
            %tbody
              - @inseminated_cows.each do |cow|
                %tr
                  %td
                    = link_to '#' do
                      = cow.serie_number
                  %td
                    = link_to '#' do
                      = cow.short_name
                      = image_tag "/assets/keppler_cattle/female", class: 'svg-icon-xs ml-2'
                  %td
                    = link_to '#' do
                      = cow.status.date
                  %td
                    = link_to '#' do
                      = cow.status.insemination&.serie_number
  
      -# = render 'season_cows_table', cows: @cows
-# = simple_form_for [@farm, @season, @cicle] do |f|
  = f.input :farm_id, as: :hidden, input_html: { value: @farm.id }
  = f.input :season_id, as: :hidden, input_html: { value: @season.id }
  = f.input :days_count, as: :hidden
  

= render 'keppler_frontend/app/seasons/modalLote', season: @season

-# = render 'keppler_frontend/app/seasons/modalCattle', season: @season
-# :javascript
  $('#add-cicle').click(function() {
    swal({
      input: 'number',
      title: "Agregar Ciclo #{@season.cicles.count + 1}",
      text: "Cantidad de días",
      confirmButtonText: "Agregar",
      cancelButtonText: "Cancelar",
      showCancelButton: true
    }).then((result) => {
      var result_values = result.value;
      console.log(result_values == '')
      if (!result_values) return false
      if (!result_values == '') {
        var cicle_days_count = result.value
        swal({
          title: 'Ciclo #{@season.cicles.count + 1}:',
          html:
            `<b>Cantidad de dias:</b> ${cicle_days_count}`,
          confirmButtonText: 'Correcto'
        }).then((result) => {
          var form = $(`#new_cicle`)
          form.find('#cicle_days_count').val(cicle_days_count)
          form.submit()
        })
      } else {
        swal({
          title: 'Error:',
          type: 'error',
          html: `<b>Campos vacíos:</b> </br>
            Cantidad de días`
        })
      }
    })
  })
:javascript
  $('#season_cow_strategic_lot').select2()

  var $ids = #{@season.cows.pluck(:id)}
  var $final_array = []

  function checkboxes() {
    function ids_loop() {
      $ids.forEach(function (id) {
        $('[checklist-model="check"]:checked').each(function( index ) {
          if ($(this).prop('id').includes(id)) {
            if ( !$final_array.includes(id) ) {
              $final_array.push(id)
            }
          }
        });
        $('[checklist-model="check"]:not(:checked)').each(function( index ) {
          if ($(this).prop('id').includes(id)) {
            if ($final_array.includes(id)) {
              $final_array.splice($final_array.indexOf(id), 1);
            }
          }
        });
      });
      $('.multiple_ids').each(function(index, elem) {
        elem.attr('href', (`${href}${$final_array}`))
      })
    }

    $('#checkbox-all').click(function() {
      $('[checklist-model="check"]').prop( "checked", $(this).prop( "checked" ) )
      ids_loop()
    })

    $('[checklist-model="check"]').click(function() {
      ids_loop()
      $('#checkbox-all').prop(
        'checked',
        JSON.stringify($ids) === JSON.stringify($final_array)
      )
    })
  }