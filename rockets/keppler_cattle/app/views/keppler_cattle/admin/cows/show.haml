.container
  .row
    .col-lg-6
      = link_to admin_cattle_cows_path, 'data-position': 'bottom', 'data-tooltip': t('keppler.actions.back') do
        .arrow-back.btn.btn-default
          %i.icon-arrow-left
          = t('keppler.actions.back')
    .col-lg-6
      .pull-right
        = link_to new_admin_cattle_cow_weight_path(@cow), 'data-position': 'bottom', 'data-tooltip': 'Update weight' do
          .update-weight.btn.btn-primary
            %i.icon-pencil
            = t('keppler.actions.update')
            = t('keppler.models.singularize.weight')

  .row
    // Cattle
    .col-md-4.col-sm-12
      .box.slice-box
        .box-header.with-border
          %h3.box-title= t('keppler.models.singularize.cow').humanize
          .box-tools.pull-right
            - if can?(model).update?
              = link_to edit_admin_cattle_cow_path(@cow), class: 'btn btn-box-tool', title: t('keppler.actions.edit') do
                %i.icon-pencil
            - if can?(model).destroy?
              = link_to admin_cattle_cow_path(@cow), class: 'btn btn-box-tool', title: t('keppler.actions.delete'), method: :delete, data: { confirm: '¿Estás seguro?' } do
                %i.icon-trash
        .box-body.no-padding
          %table.table
            %tbody
              %tr.list-row
                %th.display-label= t("activerecord.attributes.image").humanize
                %td.display-value.fs-body-1.tc-black-2
                  %center
                    = image_tag @cow.image&.url || '/assets/keppler_cattle/cow_shadow', style: 'max-width: 100%;'
                    %h5= "SIN FOTO" if @cow.image&.url.blank?
              - @cow.as_json(except: %w[id image father_type position deleted_at]).each do |attribute, value|
                %tr.list-row
                  %th.display-label= t("activerecord.attributes.#{attribute}").humanize
                  %td.display-value.fs-body-1.tc-black-2
                    - if @attachments.dig('images', 'names').include?(attribute)
                      = image_tag value.url if value.url
                    - elsif @attachments.dig('images', 'names').map(&:pluralize).include?(attribute)
                      - value.each do |image|
                        = image_tag image.url if image.url
                    - elsif attribute.eql?('species') || attribute.eql?('gender')
                      %img.svg-icon{ src: "/assets/keppler_cattle/#{value}" }
                      = t("keppler_cattle.#{value}")
                    - elsif ['mother_id', 'father_id'].include?(attribute) && value
                      = link_to admin_cattle_cow_path(value) do
                        = cow_parent_id(value)&.serie_number
                    - elsif attribute.include?('milking')
                      - if @cow.gender?('female')
                        = value
                    - else 
                      = sanitize raw value
    // Current Status
    .col-md-4.col-sm-12
      .box.slice-box
        .box-header.with-border
          %h3.box-title= t('keppler.models.singularize.weight').humanize
        .box-body.no-padding
          %ul.timeline
            - @cow.weights&.includes(:user)&.each do |weight|
              %li
                %a.timeline-item{ onclick: "weightPreview(#{weight.id})", style: 'display: inline-block' }
                  %h6.timeline-header.no-border
                    - weight.as_json(except: %w[id cow_id position deleted_at]).each do |attribute, value|
                      %small
                        %b= t("activerecord.attributes.#{attribute}").humanize + ':'
                        %span
                          - unless value.nil?
                            - if [TrueClass, FalseClass].include?(value)
                              = value ? 'Sí' : 'No'
                            - elsif [ActiveSupport::TimeWithZone].include?(value.class)
                              = value.strftime('%d/%b/%Y %H:%M')
                            - elsif attribute.include?('_id')
                              = object_name(@cow.weight, attribute) #|| model_name('keppler_cattle', attribute, value)
                            - else 
                              = sanitize raw value.to_s + "#{' KG' if attribute.include?('weight')}"
                      %br
                  %span.time
                    %i.icon-clock
                    = t('keppler.messages.at')
                    = weight.created_at.to_formatted_s(:time)
                    = t('keppler.messages.to')
                    = weight.created_at.to_formatted_s(:day)
    // Statuses
    .col-md-4.col-sm-12
      .box.slice-box
        .box-header.with-border
          %h3.box-title= @cow.weights.empty? ? t('keppler.messages.no_events') : t("keppler.titles.history")
        .box-body.no-padding
          %ul.timeline
            - @cow.weights.each_with_index.each do |weight, index|
              %li
                %a.timeline-item{ onclick: "weightPreview(#{weight.id})", style: 'display: inline-block' }
                  %h6.timeline-header.no-border
                    %small
                      %b= weight.user&.name
                      = t('keppler.messages.has')
                      - if weight.eql?(@cow.weights.first)
                        = t("keppler.actions.created").downcase
                        = t('keppler.messages.series')
                        = @cow.serie_number
                      - else
                        = t("keppler.actions.updated").downcase
                        = t("keppler.models.singularize.weight").humanize
                  %span.time
                    %i.icon-clock
                    = t('keppler.messages.at')
                    = weight.created_at.to_formatted_s(:time)
                    = t('keppler.messages.to')
                    = weight.created_at.to_formatted_s(:day)
:scss
  .svg-icon {
    height: 30px;
    margin-right: 5px;
  }

:javascript
  window.I18n = #{current_translations.to_json.html_safe}

  String.prototype.capitalize = function() {
    return this.charAt(0).toUpperCase() + this.slice(1);
  }

  function translateDate(date) {
    var event = new Date(date)
    // var options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };
    let options = { weekday: 'long', year: 'numeric', month: 'short', day: 'numeric' };
    return event.toLocaleString('es-ES', options)
  }

  function formatKey(json, key) {
    if (typeof(json[key]) == 'boolean') {
      return json[key] == true ? 'Sí' : 'No'
    } else if (key == 'weight') {
      return `${json[key]} KG`
    } else if (moment(json[key], "YYYY-MM-DDTHH:mm:ss", true).isValid() || moment(json[key], "YYYY-MM-DD", true).isValid()) {
      return moment(json[key])
    } else {
      return json[key]
    }
  }

  function weightList(json) {
    var $weightList = []
    // console.log(json)
    for (var key in json) {
      // Controlando que json realmente tenga esa propiedad
      if (json.hasOwnProperty(key)) {
        // Mostrando en pantalla la clave junto a su valor
        if (#{@cow.gender?('male')}) {
          if (!['id', 'cow_id', 'pregnant', 'lactating', 'deleted_at', 'updated_at', 'position'].includes(key)) {
            $weightList.push(
              '<tr class="list-row">' +
                '<th class="display-label">' + (I18n.activerecord.attributes[key] || key).capitalize() + '</th>' +
                '<td class="display-value fs-body-1 tc-black-2" style="display: flex">' +
                  formatKey(json, key) +
                '</td>' +
              '</tr>'
            )
          } 
        } else {
          if (!['id', 'cow_id', 'reproductive', 'defiant', 'deleted_at', 'updated_at', 'position'].includes(key)) {
            $weightList.push(
              '<tr class="list-row">' +
                '<th class="display-label">' + (I18n.activerecord.attributes[key] || key).capitalize() + '</th>' +
                '<td class="display-value fs-body-1 tc-black-2" style="display: flex">' +
                  formatKey(json, key) +
                '</td>' +
              '</tr>'
            )
          }
        }
      }
    }
    // console.log($weightList)
    return $weightList.join(' ')
  }

  function weightPreview(weight_id) {
    $.ajax(
        {
          type: "get",
          url: `/admin/cattle/cows/#{@cow&.id}/weights/${weight_id}.json`,
          success: function(data){
          }
        }
      )
    .done(function(data) {
      // console.log(data)
      Swal({
        title: '#{t("keppler.models.singularize.weight").humanize}',
        // type: 'info',
        html:
          `<div class="box slice-box">
            <div class="box-body no-padding">
              <table class="table">
                <tbody>` + 
                  weightList(data)
                + `</tbody>
              </table>
            </div>
          </div>`
      })
    })
    .error(function(data) {
      swal("Oops", "We couldn't connect to the server!", "error");
    });
  }

-# 
  function weightPreview(weight_id) {
    Swal({
      preConfirm: (login) => {
        return fetch(`/admin/cattle/cows/#{@cow&.id}/weights/${weight_id}.json`)
          .then(response => {
            if (!response.ok) {
              throw new Error(response.weightText)
            }
            return response.json()
          })
          .catch(error => {
            Swal.showValidationMessage(
              `Request failed: ${error}`
            )
          })
      },
      allowOutsideClick: () => !Swal.isLoading()
    })
  }
